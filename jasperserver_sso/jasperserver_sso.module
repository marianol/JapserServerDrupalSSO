<?php

/**
 * @file
 * Jasper Report Server simple REST API based SSO for Drupal
 */

module_load_include('inc', 'jasperserver_sso', 'jasper.rest');

define('JRS_SESSION_TIMEOUT',  60 * 20); // 20 minutes

/**
 * @defgroup jasperserver_sso Example: Trigger
 * @ingroup jasperserver
 * @{
 *
 * Jasper Report Server simple REST API based SSO for Drupal
 *
 * This module uses the Jasper Report Server REST API to integrate Drupal with
 * Jasper reports Server.
 *
 * - The SSO method uses Jasper Server REST API and cookies for the allowing
 * the user to login (initiate a session) in Jasper when he logs into Drupal
 * for this to work JRS and the Drupal have to run in the same domain.
 *
 * - The Jasper Server Session is kept alive on each page refresh and then is
 * destryed when the user log out of Drupal 
 *
 * See:
 *
 * @link http://community.jaspersoft.com/documentation/ Jasper Reports Server Documentation @endlink
 *
 * @link http://www.jaspersoft.com/ Japspersoft Main Site @endlink
 *
 */

/**
 * Implements hook_trigger_info().
 *
 * We call hook_trigger_info when we are defining the triggers we provide.
 * Triggers are the events that make fire any number of assigned actions. In
 * this example, we are registering our three new triggers, providing the group
 * (system, user..), the callback 'hook' (only informative, does not require a
 * real hook) function and the label to be shown in the triggers interface.
 *
 * Example: In the group (a tab) 'system', for the 'mail' functionality, show:
 * An email is sent by Drupal.
 */
function jasperserver_sso_trigger_info() {
  return array(
    'jasperserver_sso' => array(
      'triggersomething' => array(
        'label' => t('After the triggersomething button is clicked'),
      ),
    ),
  );
}


/**
 * triggersomething trigger: Run actions associated with an arbitrary event.
 *
 * Here pressing a button is a trigger. We have defined a
 * custom function as a trigger (jasperserver_sso_triggersomething).
 * It will ask for all actions attached to the 'triggersomething' event,
 * prepare a basic 'context' for them
 * and run all of them. This could have been implemented by a hook
 * implementation, but in this demonstration, it will just be called in a
 * form's submit.
 *
 * This function is executed during the submission of the example form defined
 * in this module.
 *
 * @param $options
 *   Array of arguments used to call the triggersomething function, if any.
 */
function jasperserver_sso_triggersomething($options = array()) {
  // Ask the trigger module for all actions enqueued for the 'triggersomething' trigger.
  $aids = trigger_get_assigned_actions('triggersomething');
  // prepare a basic context, indicating group and "hook", and call all the
  // actions with this context as arguments.
  $context = array(
    'group' => 'jasperserver_sso',
    'hook' => 'triggersomething'
  );
  actions_do(array_keys($aids), (object) $options, $context);
}


/**
 * Implements hook_user_login().
 *
 * User login trigger for SSO with JasperReports Server
 *
 * This SSO method uses Jasper Server REST API and cookies for the SSO
 * for this to work JRS and the Drupal have to run in the same domain.
 * 
 */
function jasperserver_sso_user_login(&$edit, $account, $category = NULL) {

  // Get the username and password to pass to the JRS REST Call
  $jasperOrg = "organization_1";
  $japserUser  = $edit['values']['name']  . '|' . $jasperOrg;
  $jasperPassword = $edit['values']['pass'];
  
  $requestBody = array(
      'j_username' => $japserUser,
      'j_password' => $jasperPassword
  );
  
  $response = jasperserver_sso_rest_post('login', $requestBody);

  switch ($response['metadata']['http_code']) {
      case 200:
          /*  All OK Japser login succeded
           * Extract the Cookie and save the string in my session for further requests.
           * Cookie format: JSESSIONID=<sessionID>; $Path=<pathToJRS>
          */
          preg_match('/^Set-Cookie: (.*?)$/sm', $response['body'], $cookie);
          $_SESSION['JRS_Cookie'] = '$Version=0; ' . str_replace('Path', '$Path', $cookie[1]);
          // Grab the JS Session ID and set the cookie in the right path so 
          // when I present an iFrame I can use that session to be authenticated
          // For this to work JS and the App have to run in the same domain 
          
          preg_match_all('/=(.*?);/' , $cookie[1], $cookievalue);
          $JRSSessionID = $cookievalue[1][0];
          $JRSPath = $cookievalue[1][1];
          $_SESSION['JRS_SessionID'] = $JRSSessionID;
          $_SESSION['JRS_Path'] = $JRSPath;
          setcookie('JSESSIONID', $JRSSessionID , time() + JRS_SESSION_TIMEOUT, $JRSPath);
          break;
      case 401:
          // 401 Unauthorized What should we do???
          drupal_set_message(t('An error occurred: Jasper Server Login Failed for user: @user - Contact your administrator.', array('@user' => $japserUser)), 'warning');
          break;
      case 302:
          // 302 â€“ License expired or otherwise not valid.
          drupal_set_message(t('An error occurred: Jasper Server License expired or otherwise not valid.'), 'error');
          break;          
      default:
          // Unrecognized error, login should respond with 200, 302 or 401 only
          drupal_set_message(t('An error occurred: Unrecognized error Jasper SSO Error.'), 'error');
          break;
  }

  if ($account->access == 0) {
    // Frist time logging in
    _jasperserver_sso_first_time_login('user_first_time_login', $edit, $account, $category);
  }
}

/**
 * Implements hook_user_logout
 *
 * Expire the Japser Server SSO Cookie on user logout.
 */
function jasperserver_sso_user_logout($account){
  // Expire Jasper Session Cookie
  setcookie('JSESSIONID', '' , time() - 3600, $_SESSION['JRS_Path']);
  unset($GLOBALS[_SESSION]['JRS_SessionID']);
  
}

/**
 * Implementation of hook_init().
 * 
 * Keep the Jasper Server Session alive as long as the user is logged into Drupal
 * 
 */
function jasperserver_sso_init() {
    if(isset($_SESSION['JRS_SessionID'])) {
        // do a bogus rest call and update the cookie to keep the JRS session alive
        $result = jasperserver_sso_rest_keepalive();
        setcookie('JSESSIONID', $_SESSION['JRS_SessionID'] , time() + JRS_SESSION_TIMEOUT, $_SESSION['JRS_Path']);
        }
}

/**
 * Helper functions for the module interface to test the triggersomething trigger.
 */

/**
 * Implements hook_help().
 */
function jasperserver_sso_help($path, $arg) {
  switch ($path) {
    case 'examples/jasperserver_sso':
      $explanation = t(
        'Click the button on this page to call jasperserver_sso_triggersomething()
        and fire the triggersomething event. First, you need to create an action
        and assign it to the "After the triggersomething button is clicked" trigger,
        or nothing will happen.  Use the <a href="@actions-url">Actions settings page</a>
        and assign these actions to the triggersomething event on the
        <a href="@triggers-url">Triggers settings page</a>. <br/><br/>
        ', array('@actions-url' => url('admin/config/system/actions'), '@triggers-url' => url('admin/structure/trigger/jasperserver_sso')));
      return "<p>$explanation</p>";
    case 'admin/structure/trigger/system':
      return t('you can assign actions to run everytime an email is sent by Drupal');
    case 'admin/structure/trigger/jasperserver_sso':
      $explanation = t(
      "A trigger is a system event. For the trigger example, it's just a button-press.
      To demonstrate the trigger example, choose to associate the 'display a message to the user'
      action with the 'after the triggersomething button is pressed' trigger.");
      return "<p>$explanation</p>";
  }
}

/**
 * Implements hook_menu().
 *
 * Provides a form that can be used to fire the module's triggers.
 */
function jasperserver_sso_menu() {
  $items['admin/settings/jasperserver_sso-config'] = array(
    'title'           => 'Jasper Report Server SSO',
    'description'     => 'Jasper Report Server SSO settings page.',
    'page callback'   => 'drupal_get_form',
    'page arguments' => array('jasperserver_sso_admin'),
    'access arguments' => array('administer jasperserver_sso settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Trigger example test form.
 *
 * Provides a button to run the triggersomething event.
 */
function jasperserver_sso_form($form_state) {
  $form['triggersomething'] = array(
    '#type'  => 'submit',
    '#value' => t('Run triggersomething event'),
  );
  return $form;
}

/**
 * Submit handler for the jasperserver_sso_form().
 */
function jasperserver_sso_form_submit($form, $form_state) {
  // If the user clicked the button, then run the triggersomething trigger.
  if ($form_state['values']['op'] == t('Run triggersomething event')) {
    jasperserver_sso_triggersomething();
  }
}


/**
 * Module Stettings Form for the jasperserver_sso
 */
function jasperserver_sso_admin() {
  $form = array();

  $form['jasperserver_sso_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Jasper Report Server Port'),
    '#default_value' => variable_get('jasperserver_sso_port', 8080),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("The port on which Jasper Report Server is installed (tomcat default 8080 using mod_jk 80)."),
    '#required' => TRUE,
  );
  $form['jasperserver_sso_sessiontimeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Jasper Report Server Session Time out'),
    '#default_value' => variable_get('jasperserver_sso_sessiontimeout', 20),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("The Jasper Report Server session length (in minutes) as defined in your application server container."),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

/**
 * Settingd Form Validation handler for jasperserver_sso_admin() 
 */
function jasperserver_sso_admin_validate($form, &$form_state) {

  if (!is_numeric($form_state['values']['jasperserver_sso_port'])) {
    form_set_error('jasperserver_sso_port', t('You must enter an integer for Jasper Server port number.'));
  }
  elseif ($form_state['values']['jasperserver_sso_port'] <= 0) {
    form_set_error('jasperserver_sso_port', t('Jasper Server port number must be positive.'));
  }
  if (!is_numeric($form_state['values']['jasperserver_sso_sessiontimeout'])) {
    form_set_error('jasperserver_sso_port', t('You must enter an integer number of minutes for Jasper Server session length.'));
  }
  elseif ($form_state['values']['jasperserver_sso_sessiontimeout'] <= 0) {
    form_set_error('jasperserver_sso_port', t('Jasper Server session length must be positive.'));
  }
}

/**
 * Optional usage of hook_trigger_info_alter().
 *
 * This function is not required to write your own triggers, but it may be
 * useful when you want to alter existing triggers.
 */

/**
 * Implements hook_trigger_info_alter().
 *
 * We call hook_trigger_info_alter when we want to change an existing trigger.
 * As mentioned earlier, this hook is not required to create your own triggers,
 * and should only be used when you need to alter current existing triggers. In
 * this example implementation a little change is done to the existing trigger
 * provided by core: 'cron'
 *
 * @param $triggers
 *   Array of trigger information returned by hook_trigger_info()
 *   implementations.
 *
 * @see hook_trigger_info()
 */
function jasperserver_sso_trigger_info_alter(&$triggers) {
  // Make a simple change to an existing core trigger, altering the label
  // "When cron runs" to our custom label "On cron execution"
  $triggers['system']['cron']['label'] = t('On cron execution');
}
